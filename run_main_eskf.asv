run("init_param_and_data_process.m");
run("reset.m");

global states P;
global control_status;

reset_setIMUData(0.0025);
gps_index_last = 0;

len_t = length(vehicle_t);

for i = 1:len_t

    imu_sample_new.time_us = uint64(vehicle_t(i,1)*1e6);   %转化成微秒
    imu_sample_new.delta_ang = gyro_filted(i,:)'*vehicle_dt(i,1);
    imu_sample_new.delta_vel = acc_filted(i,:)'*vehicle_dt(i,1);
    imu_sample_new.delta_ang_dt = vehicle_dt(i,1);
    imu_sample_new.delta_vel_dt = vehicle_dt(i,1);
    imu_sample_new.delta_vel_clipping = logical([0 0 0]);

    updated = setIMUData(imu_sample_new);
    
    gps_data_ready = false;
    gps_dt = data.RTK.t - imu_delta_t(i,1)*1e6;
    gps_index = find(gps_dt<1e3,1,'last');
    if gps_index_last~=gps_index    %目前都默认gps数据是能用的
        gps_data_ready = true;
        gps_index_last = gps_index;
        setGpsData();
    end



    
    if control_status.flags.in_air
        set_in_air_status(false);
    end


    if updated
        


        predictCovariance();
        predictCovariance_Matrix();
        predictState();

        runYawEKFGSF(imu_sample_updated,data.RTK,gps_data_ready,gps_index);

        controlGpsFusion(data.RTK,gps_data_ready,gps_index);

        controlHeightFusion();

    end



    

    calculateOutputStates();


    
    




end



%%


K4_Display = zeros(23,len_update);
len_gps = length(data.RTK.t);
states_quat_nominal_display=zeros(4,len_update);
states_vel_display=zeros(3,len_update);
states_pos_display=zeros(3,len_update);